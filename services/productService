const { faker }  = require('@faker-js/faker');
const boom  = require('@hapi/boom');

class ProductsService {

  constructor(){
    this.products = [];
    this.generate();
  }

  generate() {
    const limit = 100;
    for (let index = 0; index < limit; index++) {
      this.products.push({
        id: faker.datatype.uuid(),
        name: faker.commerce.productName(),
        price: parseInt(faker.commerce.price(), 10),
        image: faker.image.imageUrl(),
        // Añadimos 'isBlock' para probar el manejo de errores y no mostrar por petición get
        // los que estén bloqueados
        isBlock: faker.datatype.boolean(),
      });
    }
  }

  async create(data) {
    const newProduct = {
      id: faker.datatype.uuid(),
      ...data
    }
    this.products.push(newProduct);
    return newProduct;
  }

  // Ejemplo de cómo sería asíncronamente con un tiempo de espera de 5 segundos
  async find() {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve(this.products);
      }, 1000);
    })
  }

  async findOne(id) {
    const product = this.products.find(item => item.id === id);
    if(!product){
      // Al usar boom, el método "notFound" ya relaciona el error 404 automaticamente
      throw boom.notFound('Product not found');
    }
    if(product.isBlock){
      throw boom.conflict('Product is block');
    }
    return product;
  }

  // Al ser asíncrono, se pueden incluir try/catch
  async update(id, changes) {
    const index = this.products.findIndex(item => item.id === id);
    if (index === -1) {
      // Al usar boom, el método "notFound" ya relaciona el error con 404 automaticamente
      throw boom.notFound('Product not found');
    }
    const product = this.products[index];
    this.products[index] = {
      ...product,
      ...changes
    };
    return this.products[index];
  }

  async delete(id) {
    const index = this.products.findIndex(item => item.id === id);
    if (index === -1) {
      // Al usar boom, el método "notFound" ya relaciona el error con 404 automaticamente
      throw boom.notFound('Product not found');
    }
    this.products.splice(index, 1);
    return { id };
  }

}

module.exports = ProductsService;
